// Code generated by MockGen. DO NOT EDIT.
// Source: server.go

// Package mock_server is a generated GoMock package.
package server

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// AddSegmentsToUser mocks base method.
func (m *MockStorage) AddSegmentsToUser(user User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSegmentsToUser", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddSegmentsToUser indicates an expected call of AddSegmentsToUser.
func (mr *MockStorageMockRecorder) AddSegmentsToUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSegmentsToUser", reflect.TypeOf((*MockStorage)(nil).AddSegmentsToUser), user)
}

// CreateSegment mocks base method.
func (m *MockStorage) CreateSegment(segment Segment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSegment", segment)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSegment indicates an expected call of CreateSegment.
func (mr *MockStorageMockRecorder) CreateSegment(segment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSegment", reflect.TypeOf((*MockStorage)(nil).CreateSegment), segment)
}

// CreateUser mocks base method.
func (m *MockStorage) CreateUser(id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockStorageMockRecorder) CreateUser(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStorage)(nil).CreateUser), id)
}

// DeleteSegment mocks base method.
func (m *MockStorage) DeleteSegment(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSegment", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSegment indicates an expected call of DeleteSegment.
func (mr *MockStorageMockRecorder) DeleteSegment(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSegment", reflect.TypeOf((*MockStorage)(nil).DeleteSegment), name)
}

// DeleteSegmentsFromUser mocks base method.
func (m *MockStorage) DeleteSegmentsFromUser(user User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSegmentsFromUser", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSegmentsFromUser indicates an expected call of DeleteSegmentsFromUser.
func (mr *MockStorageMockRecorder) DeleteSegmentsFromUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSegmentsFromUser", reflect.TypeOf((*MockStorage)(nil).DeleteSegmentsFromUser), user)
}

// GetUser mocks base method.
func (m *MockStorage) GetUser(id int64) (*User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", id)
	ret0, _ := ret[0].(*User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockStorageMockRecorder) GetUser(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockStorage)(nil).GetUser), id)
}

// GetUserHistory mocks base method.
func (m *MockStorage) GetUserHistory(user User) ([]TimeUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserHistory", user)
	ret0, _ := ret[0].([]TimeUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserHistory indicates an expected call of GetUserHistory.
func (mr *MockStorageMockRecorder) GetUserHistory(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserHistory", reflect.TypeOf((*MockStorage)(nil).GetUserHistory), user)
}
